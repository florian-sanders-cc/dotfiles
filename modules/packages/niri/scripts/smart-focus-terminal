#!/usr/bin/env bash

# Smart focus script for terminal applications
# Cycles through existing terminal windows (any terminal emulator) or spawns your preferred terminal
#
# Usage:
#   smart-focus-terminal                    # Cycle through all terminal windows
#   smart-focus-terminal <terminal_name>    # Spawn specific terminal (e.g. rio, alacritty)
#   TERMINAL_CMD=alacritty smart-focus-terminal  # Use different default terminal
#
# Supported terminals: ghostty, alacritty, kitty, foot, gnome-terminal, konsole, rio
#
# Environment Variables:
#   TERMINAL_CMD - Command to spawn new terminal (default: ghostty)
#   TERMINAL_APP_IDS - Space-separated list of app_ids to consider as terminals
#
# Example key bindings for niri config:
#   bind "Mod+Return" { spawn "smart-focus-terminal"; }
#   bind "Mod+Shift+T" { spawn "smart-focus-terminal" "rio"; }

set -euo pipefail

# Default list of known terminal app_ids
DEFAULT_TERMINAL_APP_IDS="com.mitchellh.ghostty Alacritty kitty foot org.gnome.Terminal org.kde.konsole rio"
TERMINAL_APP_IDS="${TERMINAL_APP_IDS:-$DEFAULT_TERMINAL_APP_IDS}"
TERMINAL_CMD="${TERMINAL_CMD:-alacritty}"

# Function to get all window information from niri
get_windows() {
    niri msg --json windows
}

# Function to get currently focused window
get_focused_window() {
    get_windows | jq -r '.[] | select(.is_focused == true) | .id'
}

# Function to get all terminal windows
get_terminal_windows() {
    local app_ids_array
    read -ra app_ids_array <<< "$TERMINAL_APP_IDS"
    
    # Convert app_ids to JSON array for jq
    local jq_array="["
    for i in "${!app_ids_array[@]}"; do
        if [[ $i -gt 0 ]]; then
            jq_array+=","
        fi
        jq_array+="\"${app_ids_array[$i]}\""
    done
    jq_array+="]"
    
    # Get windows whose app_id matches any in our list
    get_windows | jq -r --argjson ids "$jq_array" \
        '.[] | select(.app_id as $id | $ids | index($id)) | .id'
}

# Function to focus window by ID
focus_window() {
    local window_id="$1"
    niri msg action focus-window --id="$window_id"
}

# Function to spawn new terminal instance
spawn_terminal() {
    local terminal_cmd="$1"
    echo "Spawning terminal: $terminal_cmd" >&2
    $terminal_cmd &
    disown
}

# Function to get terminal command by name
get_terminal_command() {
    local terminal_name="$1"
    case "$terminal_name" in
        ghostty) echo "ghostty" ;;
        alacritty) echo "alacritty" ;;
        kitty) echo "kitty" ;;
        foot) echo "foot" ;;
        gnome-terminal) echo "gnome-terminal" ;;
        konsole) echo "konsole" ;;
        rio) echo "rio" ;;
        *) 
            echo "Error: Unsupported terminal '$terminal_name'" >&2
            echo "Supported terminals: ghostty, alacritty, kitty, foot, gnome-terminal, konsole, rio" >&2
            return 1
            ;;
    esac
}

main() {
    local terminal_to_spawn="${1:-}"

    # If a terminal name is provided, spawn that specific terminal
    if [[ -n "$terminal_to_spawn" ]]; then
        local terminal_cmd
        if terminal_cmd=$(get_terminal_command "$terminal_to_spawn"); then
            spawn_terminal "$terminal_cmd"
        else
            exit 1
        fi
        exit 0
    fi

    # Get all terminal windows (from any terminal emulator)
    local terminal_windows
    terminal_windows=$(get_terminal_windows)

    # If no terminal windows exist, spawn default terminal
    if [[ -z "$terminal_windows" ]]; then
        spawn_terminal "$TERMINAL_CMD"
        exit 0
    fi

    # Convert to array
    readarray -t window_array <<< "$terminal_windows"

    # Remove empty elements
    window_array=("${window_array[@]//}")

    # If only one window, focus it
    if [[ ${#window_array[@]} -eq 1 ]]; then
        focus_window "${window_array[0]}"
        exit 0
    fi

    # Multiple windows exist - cycle through them
    local current_focused
    current_focused=$(get_focused_window)

    # Find current terminal window in the array
    local current_index=-1
    for i in "${!window_array[@]}"; do
        if [[ "${window_array[$i]}" == "$current_focused" ]]; then
            current_index=$i
            break
        fi
    done

    # If current focused window is a terminal window, focus next one
    if [[ $current_index -ne -1 ]]; then
        local next_index=$(( (current_index + 1) % ${#window_array[@]} ))
        focus_window "${window_array[$next_index]}"
    else
        # Current focused window is not a terminal, focus the first terminal window
        focus_window "${window_array[0]}"
    fi
}

main "$@"
