// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
// keymap.json, generated at Tue Sep 17 2024 12:50:50 GMT+0800 (Singapore Standard Time)
[
  {
    "bindings": {
      "ctrl-shift-w": "workspace::CloseAllDocks",
      "ctrl-+": ["zed::IncreaseBufferFontSize", { "persist": true }],
      "ctrl--": ["zed::DecreaseBufferFontSize", { "persist": true }]
    }
  },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      // Toggle inlay hints
      "ctrl i": "editor::ToggleInlayHints",

      // Open recent project
      "ctrl f p": "projects::OpenRecent",

      // Go to file with `gf`
      "g f": "editor::OpenExcerpts",

      "ctrl l": "editor::ToggleRelativeLineNumbers"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // +LSP
      "ctrl-r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      // TODO: Go to next/prev error
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",
      // Symbol search
      "s s": "outline::Toggle",
      "s S": "project_symbols::Toggle",
      // Diagnostic
      "ctrl x": "diagnostics::Deploy",

      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",

      // Save file
      "ctrl-s": "workspace::Save",

      // git
      "ctrl-shift-g": "git_panel::ToggleFocus",
      "ctrl-shift-n": [
        "task::Spawn",
        { "task_name": "Neogit", "target": "center" }
      ]
    }
  },
  // Empty pane, set of keybindings that are available when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open recent project
      "ctrl f p": "projects::OpenRecent"
    }
  },
  // Comment code
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      "g c": "editor::ToggleComments"
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // Code Action
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions" // zed specific
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "y": "project_panel::Copy",
      "p": "project_panel::Paste",
      "left": "project_panel::CollapseSelectedEntry",
      "right": "project_panel::ExpandSelectedEntry",
      "ctrl-y": "workspace::CopyPath",
      "ctrl-shift-y": "workspace::CopyRelativePath",
      "ctrl-f": "project_panel::NewSearchInDirectory",
      "escape": "menu::Cancel",
      "l": "project_panel::ExpandSelectedEntry",
      "h": "project_panel::CollapseSelectedEntry",
      "shift-h": "project_panel::CollapseAllEntries",
      "ctrl-p": "file_finder::Toggle",
      // git
      "ctrl-shift-g": [
        "task::Spawn",
        { "task_name": "Neogit", "target": "center" }
      ]
    }
  },
  // Panel nagivation
  {
    "context": "Dock || vim_mode == normal || vim_mode == visual",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ToggleBottomDock",
      "ctrl-w": "pane::CloseActiveItem",
      "ctrl-shift-w": "pane::CloseAllItems",
      "ctrl-b": "workspace::ToggleLeftDock",
      "ctrl-shift-b": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "terminal",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ToggleBottomDock",
      "ctrl-w": "pane::CloseActiveItem",
      "ctrl-shift-w": "pane::CloseAllItems",
      "ctrl-b": "workspace::ToggleLeftDock"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "alt-o": "editor::SelectLargerSyntaxNode",
      "alt-i": "editor::SelectSmallerSyntaxNode",
      "s": "vim::PushSneak",
      "S": "vim::PushSneakBackward"
    }
  },
  // Subword motion is not working really nice with `ciw`, disable for now
  {
    "context": "VimControl && !menu && vim_mode != operator",
    "bindings": {
      "w": "vim::NextSubwordStart",
      "b": "vim::PreviousSubwordStart",
      "e": "vim::NextSubwordEnd",
      "g e": "vim::PreviousSubwordEnd"
    }
  },
  {
    "context": "Editor && mode == full",
    "bindings": {
      "shift-enter": ["editor::ExpandExcerpts", { "lines": 5 }]
    }
  }
]
